[{"/Users/bhvbhushan/work/springboard/jobly/frontend/src/index.js":"1","/Users/bhvbhushan/work/springboard/jobly/frontend/src/App.js":"2","/Users/bhvbhushan/work/springboard/jobly/frontend/src/reportWebVitals.js":"3","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Jobly.js":"4","/Users/bhvbhushan/work/springboard/jobly/frontend/src/NavBar.js":"5","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Home.js":"6","/Users/bhvbhushan/work/springboard/jobly/frontend/src/PrivateRoutes.js":"7","/Users/bhvbhushan/work/springboard/jobly/frontend/src/useLocalStorage.js":"8","/Users/bhvbhushan/work/springboard/jobly/frontend/src/UserContext.js":"9","/Users/bhvbhushan/work/springboard/jobly/frontend/src/api.js":"10","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Profile.js":"11","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Company/CompanyList.js":"12","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Job/JobList.js":"13","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Auth/SignUp.js":"14","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Auth/Login.js":"15","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Company/CompanyDetail.js":"16","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Company/CompanyCard.js":"17","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Job/JobCard.js":"18"},{"size":547,"mtime":1611172270494,"results":"19","hashOfConfig":"20"},{"size":158,"mtime":1611172270486,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1611172270494,"results":"22","hashOfConfig":"20"},{"size":5228,"mtime":1611172270492,"results":"23","hashOfConfig":"20"},{"size":2136,"mtime":1611172270492,"results":"24","hashOfConfig":"20"},{"size":729,"mtime":1611172270490,"results":"25","hashOfConfig":"20"},{"size":472,"mtime":1611172270493,"results":"26","hashOfConfig":"20"},{"size":586,"mtime":1611172270494,"results":"27","hashOfConfig":"20"},{"size":102,"mtime":1611172270493,"results":"28","hashOfConfig":"20"},{"size":2316,"mtime":1611175930548,"results":"29","hashOfConfig":"20"},{"size":4204,"mtime":1611172270493,"results":"30","hashOfConfig":"20"},{"size":1496,"mtime":1611172270489,"results":"31","hashOfConfig":"20"},{"size":1749,"mtime":1611172270491,"results":"32","hashOfConfig":"20"},{"size":3959,"mtime":1611172270487,"results":"33","hashOfConfig":"20"},{"size":2406,"mtime":1611172270486,"results":"34","hashOfConfig":"20"},{"size":1271,"mtime":1611172270488,"results":"35","hashOfConfig":"20"},{"size":1143,"mtime":1611172270487,"results":"36","hashOfConfig":"20"},{"size":1840,"mtime":1611172270491,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1xyxqd4",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/bhvbhushan/work/springboard/jobly/frontend/src/index.js",[],["78","79"],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/App.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/reportWebVitals.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Jobly.js",["80"],"import React, { useState, useEffect } from 'react'\r\nimport NavBar from \"./NavBar\"\r\nimport Home from \"./Home\"\r\nimport CompanyList from \"./Company/CompanyList\"\r\nimport JobList from \"./Job/JobList\"\r\nimport Login from \"./Auth/Login\"\r\nimport SignUp from \"./Auth/SignUp\"\r\nimport Profile from \"./Profile\"\r\nimport JoblyApi from \"./api\"\r\nimport PrivateRoutes from \"./PrivateRoutes\"\r\nimport CompanyDetail from \"./Company/CompanyDetail\"\r\nimport UserContext from \"./UserContext\"\r\nimport useLocalStorage from \"./useLocalStorage\"\r\nimport jwt from \"jsonwebtoken\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Route, Switch, BrowserRouter, Redirect } from \"react-router-dom\"\r\n\r\n\r\nconst Jobly = () => {\r\n\r\n    const [companyList, setCompanyList] = useState([])\r\n    const [jobList, setJobList] = useState([])\r\n    const [infoLoaded, setInfoLoaded] = useState(false);\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [token, setToken] = useLocalStorage(\"jobly-token\")\r\n    const [applicationIds, setApplicationIds] = useState(new Set([]));\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        async function getCurrentUser() {\r\n            if (token) {\r\n                try {\r\n                    let { username } = jwt.decode(token)\r\n                    JoblyApi.token = token;\r\n                    let currentUser = await JoblyApi.getCurrentUser(username);\r\n                    setCurrentUser(currentUser)\r\n                    setApplicationIds(new Set(currentUser.applications));\r\n                } catch (e) {\r\n                    console.error(\"Problem loading\", e)\r\n                    setCurrentUser(null)\r\n                }\r\n            }\r\n            setInfoLoaded(true);\r\n        }\r\n        setInfoLoaded(false);\r\n        getCurrentUser()\r\n    }, [token])\r\n\r\n    useEffect(() => {\r\n        async function getAllCompanies() {\r\n            let company = await JoblyApi.getAllCompanies();\r\n            setCompanyList(company.companies)\r\n        }\r\n        getAllCompanies();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function getAllJobs() {\r\n            let jobs = await JoblyApi.getAllJobs();\r\n            setJobList(jobs.jobs)\r\n        }\r\n        getAllJobs();\r\n    }, []);\r\n\r\n    const searchCompany = async (name) => {\r\n        let company = await JoblyApi.getAllCompanies(name);\r\n        setCompanyList(company.companies)\r\n    }\r\n\r\n    const searchJob = async (title) => {\r\n        let jobs = await JoblyApi.getAllJobs(title);\r\n        setJobList(jobs.jobs)\r\n    }\r\n\r\n    const SignUpData = async (data) => {\r\n        try {\r\n            let signupToken = await JoblyApi.signup(data);\r\n            setToken(signupToken)\r\n            return { success: true };\r\n        } catch (e) {\r\n            console.error(\"Signing failed\")\r\n            return { success: false }\r\n        }\r\n    }\r\n\r\n    const LoginData = async (data) => {\r\n        try {\r\n            let loginToken = await JoblyApi.login(data);\r\n            setToken(loginToken)\r\n            return { success: true };\r\n        } catch (e) {\r\n            console.error(\"Login failed\")\r\n            return { success: false }\r\n        }\r\n    }\r\n\r\n    const LogOut = () => {\r\n        setCurrentUser(null)\r\n        setToken(\"\")\r\n    }\r\n\r\n    function hasAppliedToJob(id) {\r\n        return applicationIds.has(id);\r\n    }\r\n\r\n    function applyToJob(id) {\r\n        if (hasAppliedToJob(id)) return;\r\n        JoblyApi.applyToJob(currentUser.username, id);\r\n        setApplicationIds(new Set([...applicationIds, id]));\r\n    }\r\n\r\n    if (!infoLoaded) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <UserContext.Provider\r\n                value={{ currentUser, setCurrentUser, LogOut, hasAppliedToJob, applyToJob }}>\r\n                <NavBar />\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <Login\r\n                            LoginData={LoginData}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/signup\">\r\n                        <SignUp\r\n                            SignUpData={SignUpData}\r\n                        />\r\n                    </Route>\r\n                    <PrivateRoutes exact path=\"/companies\">\r\n                        <CompanyList\r\n                            searchCompany={searchCompany}\r\n                            companyList={companyList} />\r\n                    </PrivateRoutes>\r\n                    <PrivateRoutes exact path=\"/companies/:handle\">\r\n                        <CompanyDetail />\r\n                    </PrivateRoutes>\r\n                    <PrivateRoutes exact path=\"/jobs\">\r\n                        <JobList\r\n                            searchJob={searchJob}\r\n                            jobList={jobList} />\r\n                    </PrivateRoutes>\r\n                    <PrivateRoutes exact path=\"/profile\">\r\n                        <Profile />\r\n                    </PrivateRoutes>\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </UserContext.Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Jobly;","/Users/bhvbhushan/work/springboard/jobly/frontend/src/NavBar.js",["81"],"import React, { useContext } from \"react\";\r\nimport UserContext from \"./UserContext\"\r\nimport { Navbar, Nav, NavItem, NavLink } from \"reactstrap\";\r\nimport \"./NavBar.css\"\r\n\r\nconst NavBar = () => {\r\n\r\n    const { currentUser, setCurrentUser, LogOut } = useContext(UserContext)\r\n\r\n    return (\r\n\r\n        <Navbar>\r\n            <Nav className=\"nav navbar-nav navbar-right\" >\r\n                <NavItem>\r\n                    <NavLink href=\"/\">\r\n                        Jobly\r\n                        </NavLink>\r\n                </NavItem>\r\n            </Nav>\r\n            <Nav >\r\n                {currentUser\r\n                    ?\r\n                    <>\r\n                        <NavItem>\r\n                            <NavLink href=\"/companies\" >\r\n                                Companies\r\n                                </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/jobs\" >\r\n                                Jobs\r\n                                </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/profile\" >\r\n                                Profile\r\n                                </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/\" onClick={LogOut}>\r\n                                Log out {currentUser.username}\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <NavItem>\r\n                            <NavLink href=\"/login\" >\r\n                                Login\r\n                                </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"/signup\" >\r\n                                Signup\r\n                                </NavLink>\r\n                        </NavItem>\r\n                    </>\r\n                }\r\n\r\n\r\n            </Nav>\r\n        </Navbar>\r\n\r\n    )\r\n}\r\n\r\nexport default NavBar;","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Home.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/PrivateRoutes.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/useLocalStorage.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/UserContext.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/api.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Profile.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Company/CompanyList.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Job/JobList.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Auth/SignUp.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Auth/Login.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Company/CompanyDetail.js",[],"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Company/CompanyCard.js",["82"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    CardText,\r\n} from \"reactstrap\";\r\nimport \"./CompanyCard.css\"\r\n\r\nconst CompanyCard = ({ info }) => {\r\n\r\n    return (\r\n        <div>\r\n            {info.map(data => (\r\n                <Link to={`/companies/${data.handle}`}>\r\n                    <Card className=\"CompanyCard\">\r\n                        <CardBody>\r\n                            <CardTitle>\r\n                                <h4>{data.name}</h4>\r\n                                {data.logoUrl\r\n                                    ?\r\n                                    <img src={`${data.logoUrl}`}></img>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </CardTitle>\r\n                            <CardText>\r\n                                {data.description}\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Link>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompanyCard\r\n","/Users/bhvbhushan/work/springboard/jobly/frontend/src/Job/JobCard.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":28,"column":11,"nodeType":"89","messageId":"90","endLine":28,"endColumn":18},{"ruleId":"87","severity":1,"message":"91","line":8,"column":26,"nodeType":"89","messageId":"90","endLine":8,"endColumn":40},{"ruleId":"92","severity":1,"message":"93","line":23,"column":37,"nodeType":"94","endLine":23,"endColumn":66},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'setCurrentUser' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]