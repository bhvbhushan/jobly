{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bhvbhushan/work/springboard/jobly/frontend/src/Jobly.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport NavBar from \"./NavBar\";\nimport Home from \"./Home\";\nimport CompanyList from \"./Company/CompanyList\";\nimport JobList from \"./Job/JobList\";\nimport Login from \"./Auth/Login\";\nimport SignUp from \"./Auth/SignUp\";\nimport Profile from \"./Profile\";\nimport JoblyApi from \"./api\";\nimport PrivateRoutes from \"./PrivateRoutes\";\nimport CompanyDetail from \"./Company/CompanyDetail\";\nimport UserContext from \"./UserContext\";\nimport useLocalStorage from \"./useLocalStorage\";\nimport jwt from \"jsonwebtoken\";\nimport { useHistory } from \"react-router-dom\";\nimport { Route, Switch, BrowserRouter, Redirect } from \"react-router-dom\";\n\nconst Jobly = () => {\n  _s();\n\n  const [companyList, setCompanyList] = useState([]);\n  const [jobList, setJobList] = useState([]);\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(\"jobly-token\");\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const history = useHistory();\n  useEffect(() => {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt.decode(token);\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (e) {\n          console.error(\"Problem loading\", e);\n          setCurrentUser(null);\n        }\n      }\n\n      setInfoLoaded(true);\n    }\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n  useEffect(() => {\n    async function getAllCompanies() {\n      let company = await JoblyApi.getAllCompanies();\n      setCompanyList(company.companies);\n    }\n\n    getAllCompanies();\n  }, []);\n  useEffect(() => {\n    async function getAllJobs() {\n      let jobs = await JoblyApi.getAllJobs();\n      setJobList(jobs.jobs);\n    }\n\n    getAllJobs();\n  }, []);\n\n  const searchCompany = async name => {\n    let company = await JoblyApi.getAllCompanies(name);\n    setCompanyList(company.companies);\n  };\n\n  const searchJob = async title => {\n    let jobs = await JoblyApi.getAllJobs(title);\n    setJobList(jobs.jobs);\n  };\n\n  const SignUpData = async data => {\n    try {\n      let signupToken = await JoblyApi.signup(data);\n      setToken(signupToken);\n      return {\n        success: true\n      };\n    } catch (e) {\n      console.error(\"Signing failed\");\n      return {\n        success: false\n      };\n    }\n  };\n\n  const LoginData = async data => {\n    try {\n      let loginToken = await JoblyApi.login(data);\n      setToken(loginToken);\n      return {\n        success: true\n      };\n    } catch (e) {\n      console.error(\"Login failed\");\n      return {\n        success: false\n      };\n    }\n  };\n\n  const LogOut = () => {\n    setCurrentUser(null);\n    setToken(\"\");\n  };\n\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser,\n        LogOut,\n        hasAppliedToJob,\n        applyToJob\n      },\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/login\",\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            LoginData: LoginData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(SignUp, {\n            SignUpData: SignUpData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoutes, {\n          exact: true,\n          path: \"/companies\",\n          children: /*#__PURE__*/_jsxDEV(CompanyList, {\n            searchCompany: searchCompany,\n            companyList: companyList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoutes, {\n          exact: true,\n          path: \"/companies/:handle\",\n          children: /*#__PURE__*/_jsxDEV(CompanyDetail, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoutes, {\n          exact: true,\n          path: \"/jobs\",\n          children: /*#__PURE__*/_jsxDEV(JobList, {\n            searchJob: searchJob,\n            jobList: jobList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoutes, {\n          exact: true,\n          path: \"/profile\",\n          children: /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Jobly, \"1ne13w5r93uuo2yAyqXL19UhLO8=\", false, function () {\n  return [useLocalStorage, useHistory];\n});\n\n_c = Jobly;\nexport default Jobly;\n\nvar _c;\n\n$RefreshReg$(_c, \"Jobly\");","map":{"version":3,"sources":["/Users/bhvbhushan/work/springboard/jobly/frontend/src/Jobly.js"],"names":["React","useState","useEffect","NavBar","Home","CompanyList","JobList","Login","SignUp","Profile","JoblyApi","PrivateRoutes","CompanyDetail","UserContext","useLocalStorage","jwt","useHistory","Route","Switch","BrowserRouter","Redirect","Jobly","companyList","setCompanyList","jobList","setJobList","infoLoaded","setInfoLoaded","currentUser","setCurrentUser","token","setToken","applicationIds","setApplicationIds","Set","history","getCurrentUser","username","decode","applications","e","console","error","getAllCompanies","company","companies","getAllJobs","jobs","searchCompany","name","searchJob","title","SignUpData","data","signupToken","signup","success","LoginData","loginToken","login","LogOut","hasAppliedToJob","id","has","applyToJob"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport NavBar from \"./NavBar\"\r\nimport Home from \"./Home\"\r\nimport CompanyList from \"./Company/CompanyList\"\r\nimport JobList from \"./Job/JobList\"\r\nimport Login from \"./Auth/Login\"\r\nimport SignUp from \"./Auth/SignUp\"\r\nimport Profile from \"./Profile\"\r\nimport JoblyApi from \"./api\"\r\nimport PrivateRoutes from \"./PrivateRoutes\"\r\nimport CompanyDetail from \"./Company/CompanyDetail\"\r\nimport UserContext from \"./UserContext\"\r\nimport useLocalStorage from \"./useLocalStorage\"\r\nimport jwt from \"jsonwebtoken\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Route, Switch, BrowserRouter, Redirect } from \"react-router-dom\"\r\n\r\n\r\nconst Jobly = () => {\r\n\r\n    const [companyList, setCompanyList] = useState([])\r\n    const [jobList, setJobList] = useState([])\r\n    const [infoLoaded, setInfoLoaded] = useState(false);\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [token, setToken] = useLocalStorage(\"jobly-token\")\r\n    const [applicationIds, setApplicationIds] = useState(new Set([]));\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        async function getCurrentUser() {\r\n            if (token) {\r\n                try {\r\n                    let { username } = jwt.decode(token)\r\n                    JoblyApi.token = token;\r\n                    let currentUser = await JoblyApi.getCurrentUser(username);\r\n                    setCurrentUser(currentUser)\r\n                    setApplicationIds(new Set(currentUser.applications));\r\n                } catch (e) {\r\n                    console.error(\"Problem loading\", e)\r\n                    setCurrentUser(null)\r\n                }\r\n            }\r\n            setInfoLoaded(true);\r\n        }\r\n        setInfoLoaded(false);\r\n        getCurrentUser()\r\n    }, [token])\r\n\r\n    useEffect(() => {\r\n        async function getAllCompanies() {\r\n            let company = await JoblyApi.getAllCompanies();\r\n            setCompanyList(company.companies)\r\n        }\r\n        getAllCompanies();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function getAllJobs() {\r\n            let jobs = await JoblyApi.getAllJobs();\r\n            setJobList(jobs.jobs)\r\n        }\r\n        getAllJobs();\r\n    }, []);\r\n\r\n    const searchCompany = async (name) => {\r\n        let company = await JoblyApi.getAllCompanies(name);\r\n        setCompanyList(company.companies)\r\n    }\r\n\r\n    const searchJob = async (title) => {\r\n        let jobs = await JoblyApi.getAllJobs(title);\r\n        setJobList(jobs.jobs)\r\n    }\r\n\r\n    const SignUpData = async (data) => {\r\n        try {\r\n            let signupToken = await JoblyApi.signup(data);\r\n            setToken(signupToken)\r\n            return { success: true };\r\n        } catch (e) {\r\n            console.error(\"Signing failed\")\r\n            return { success: false }\r\n        }\r\n    }\r\n\r\n    const LoginData = async (data) => {\r\n        try {\r\n            let loginToken = await JoblyApi.login(data);\r\n            setToken(loginToken)\r\n            return { success: true };\r\n        } catch (e) {\r\n            console.error(\"Login failed\")\r\n            return { success: false }\r\n        }\r\n    }\r\n\r\n    const LogOut = () => {\r\n        setCurrentUser(null)\r\n        setToken(\"\")\r\n    }\r\n\r\n    function hasAppliedToJob(id) {\r\n        return applicationIds.has(id);\r\n    }\r\n\r\n    function applyToJob(id) {\r\n        if (hasAppliedToJob(id)) return;\r\n        JoblyApi.applyToJob(currentUser.username, id);\r\n        setApplicationIds(new Set([...applicationIds, id]));\r\n    }\r\n\r\n    if (!infoLoaded) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <UserContext.Provider\r\n                value={{ currentUser, setCurrentUser, LogOut, hasAppliedToJob, applyToJob }}>\r\n                <NavBar />\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <Login\r\n                            LoginData={LoginData}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/signup\">\r\n                        <SignUp\r\n                            SignUpData={SignUpData}\r\n                        />\r\n                    </Route>\r\n                    <PrivateRoutes exact path=\"/companies\">\r\n                        <CompanyList\r\n                            searchCompany={searchCompany}\r\n                            companyList={companyList} />\r\n                    </PrivateRoutes>\r\n                    <PrivateRoutes exact path=\"/companies/:handle\">\r\n                        <CompanyDetail />\r\n                    </PrivateRoutes>\r\n                    <PrivateRoutes exact path=\"/jobs\">\r\n                        <JobList\r\n                            searchJob={searchJob}\r\n                            jobList={jobList} />\r\n                    </PrivateRoutes>\r\n                    <PrivateRoutes exact path=\"/profile\">\r\n                        <Profile />\r\n                    </PrivateRoutes>\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </UserContext.Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Jobly;"]},"metadata":{},"sourceType":"module"}