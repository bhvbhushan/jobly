{"ast":null,"code":"import axios from \"axios\"; // const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3002\";\n\nexport const BASE_API_URL = '';\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Get details on a company by handle. */\n\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async getAllCompanies(name) {\n    if (name) {\n      let res = await this.request(`companies/?name=${name}`);\n      return res;\n    } else {\n      let res = await this.request(`companies/`);\n      return res;\n    }\n  }\n\n  static async getAllJobs(title) {\n    if (title) {\n      let res = await this.request(`jobs/?title=${title}`);\n      return res;\n    } else {\n      let res = await this.request(`jobs/`);\n      return res;\n    }\n  }\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n}\n\nexport default JoblyApi;","map":{"version":3,"sources":["/Users/bhvbhushan/work/springboard/jobly/frontend/src/api.js"],"names":["axios","BASE_API_URL","JoblyApi","request","endpoint","data","method","console","debug","url","BASE_URL","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getAllCompanies","name","getAllJobs","title","signup","login","getCurrentUser","username","user","saveProfile","applyToJob","id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3002\";\nexport const BASE_API_URL = '';\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async getAllCompanies(name) {\n\n    if (name) {\n      let res = await this.request(`companies/?name=${name}`);\n      return res;\n    } else {\n      let res = await this.request(`companies/`);\n      return res;\n    }\n  }\n\n  static async getAllJobs(title) {\n    if (title) {\n      let res = await this.request(`jobs/?title=${title}`);\n      return res;\n    } else {\n      let res = await this.request(`jobs/`);\n      return res;\n    }\n  }\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n}\n\nexport default JoblyApi;"]},"metadata":{},"sourceType":"module"}